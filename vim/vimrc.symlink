set history=500
let mapleader = " "

" Basic settings
set nocompatible

set noswapfile

set ruler
set relativenumber
"set relativenumber
set numberwidth=3
set nowrap
set ignorecase

set hlsearch
set incsearch 

set noerrorbells
set novisualbell

set notimeout
set nottimeout

" fuzzy find vagy mi
set path+=**
set wildmenu

set autoindent
set noexpandtab
set tabstop=4
set shiftwidth=4
set expandtab


set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
""""""""""""
" Status line
""""""""""""
set laststatus=2
function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi statusline guibg=Cyan ctermfg=6 guifg=Black ctermbg=0
  elseif a:mode == 'r'
    hi statusline guibg=Purple ctermfg=5 guifg=Black ctermbg=0
  else
    hi statusline guibg=DarkRed ctermfg=1 guifg=Black ctermbg=0
  endif
endfunction

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi statusline guibg=DarkGrey ctermfg=8 guifg=White ctermbg=15

" default the statusline to green when entering Vim
hi statusline guibg=DarkGrey ctermfg=8 guifg=White ctermbg=15

set statusline=\ \ %f\ \                            " file name
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%y      "filetype
set statusline+=%h      "help file flag
set statusline+=[%{getbufvar(bufnr('%'),'&mod')?'modified':'saved'}]      
"modified flag

set statusline+=%r      "read only flag

set statusline+=\ %=                        " align left
set statusline+=Line:%l/%L[%p%%]            " line X of Y [percent of file]
set statusline+=\ Col:%c                    " current column
set statusline+=\ Buf:%n                    " Buffer number
set statusline+=\ [%b][0x%B]\               " ASCII and byte code under cursor



"
"nerdtree
let NERDTreeShowHidden=1
au vimenter * if !argc() | NERDTree | endif

syntax enable
colo monokai
filetype plugin on

""""""""""""
" Mappings:
""""""""""""
" abbrevs
ab sqrt √
ab tic ✓
ab sup2 ²
""""""""""
" Bindings:
"""""""""
" nnoremap 0 ^
" nnoremap <leader>r :! ./run<cr>

nnoremap <leader>f :GFiles<cr>
nnoremap gp gT
nnoremap <leader><leader> <C-W>_
nnoremap <leader>s :vsp<cr>
nnoremap <leader>k :call ToggleList()<cr>
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>re :%s/
nnoremap <leader>n :call ToggleNumber()<cr>
nnoremap <leader>p :call ToggleWrap()<cr>
nnoremap <leader>l :vertical resize +7<CR>
nnoremap <leader>h :vertical resize -7<CR>

" moving between splits
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" tabs
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>tc :tabclose<cr>


nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

nnoremap <space> viwy

"uppercase a word

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>ez :vsplit $HOME/.zshrc<cr>
nnoremap <leader>rs :source $MYVIMRC<cr>
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel
" nnoremap <leader>h :nohl<cr>

inoremap { {}<esc>i
"inoremap ( ()<esc>i
"inoremap [ []<esc>i
"inoremap " ""<esc>i
"inoremap ' ''<esc>i

vnoremap . :normal .<cr>

" Buffers
nnoremap <leader>bn :bNext<cr>
nnoremap <leader>bp :bprevious<cr>
nnoremap <leader>bd :bdelete<cr>


inoremap {<cr> {<cr>}<esc>O

inoremap jk <esc>

"nerdtree mapping:
nnoremap <C-n> :NERDTreeToggle<cr>


""""""""""
"comments:
" dictionaries
"""""""""
"autocmd FileType python nnoremap <buffer> <leader>c I#<esc>
au FileType * execute 'setlocal dict+=~/.vim/words/'.&filetype.'.txt'
au BufRead,BufNewFile *.ejs setfiletype html

"autocmd FileType vim nnoremap <buffer> <leader>c I"<esc>



" Plugins

call plug#begin()
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'bfrg/vim-cpp-modern'
    Plug 'preservim/nerdtree'
    Plug 'vim-scripts/AutoComplPop'
    Plug 'jelera/vim-javascript-syntax'
call plug#end()

"""""""""""""
" Functions"
"""""""""""""
:function ToggleList()
:  if &list == 1
:    set nolist
:  else
:    set list
:  endif
:endfunction


:function ToggleNumber()
:  if &relativenumber == 1
:    set norelativenumber
:  else
:    set relativenumber
:  endif
:endfunction

:function ToggleWrap()
:  if &wrap == 1
:    set nowrap
:  else
:    set wrap
:  endif
:endfunction
