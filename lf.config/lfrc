set ratios 1:2:3
# interpreter for shell commands
set shell bash
set cursorpreviewfmt "\033[7m"

# set previewer lf_kitty_preview
# set cleaner lf_kitty_clean
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 5

# use enter for shell commands
map <enter> read

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        graphml) $OPENER $f > /dev/null 2> /dev/null;;
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        application/pdf) zathura $f > /dev/null;;

        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


cmd trash &{{
   set -f
   TRASH_DIR="$HOME/.local/share/lftrash/files"
   META_DIR="$HOME/.local/share/lftrash/meta"
   mkdir -p "$TRASH_DIR" "$META_DIR"

   for f in $fx; do
       base=$(basename "$f")
       uuid=$(date +%s%N)  # unique ID for each trashed file
       mv -- "$f" "$TRASH_DIR/$uuid"
       realpath "$f" > "$META_DIR/$uuid"
   done
}}

cmd undelete ${{
   set -f
   TRASH_DIR="$HOME/.local/share/lftrash/files"
   META_DIR="$HOME/.local/share/lftrash/meta"
   TMP_SELECTION=$HOME/.cache/lf_undelete
   
   : > $HOME/.cache/lf_undelete

   lf -command 'cmd on-quit $ echo $fs > $HOME/.cache/lf_undelete' $TRASH_DIR

    while IFS= read -r file; do
        uuid=$(basename "$file")
        meta="$META_DIR/$uuid"
        [ ! -f "$meta" ] && continue
        dest=$(cat "$meta")
        destdir=$(dirname "$dest")
        mkdir -p "$destdir"
        mv -i "$file" "$dest"
        rm -f "$meta"
    done < "$TMP_SELECTION"

}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd create_dir ${{
    mkdir -p $1
}}

cmd create ${{
    if [[ ${1: -1} == "/" ]]; then
        mkdir -p $1
    else
        touch $1
    fi
	# mkdir $1
}}

# bindings
map . set hidden!
map p paste
map x cut
map y copy
map P delete
map D trash
map U undelete

map a push :create<space>
map A push :create_dir<space>

map F filter
map Z push :zip<space>
map E extract

map w
map R !massren
map V !nvim .
